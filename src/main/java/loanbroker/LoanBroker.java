/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package loanbroker;

import gateway.BankGateway;
import gateway.ClientGateway;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.jms.JMSException;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import model.bank.BankInterestReply;
import model.bank.BankInterestRequest;
import model.loan.LoanReply;
import model.loan.LoanRequest;
import model.loanbroker.Aggregator;
import model.requestreply.RequestReply;
import net.sourceforge.jeval.Evaluator;

/**
 *
 * @author Maarten
 */
public class LoanBroker extends javax.swing.JFrame
{
    private final ClientGateway clientGateway;
    private final BankGateway bankGatewayABN;
    private final BankGateway bankGatewayRABO;
    private final BankGateway bankGatewayING;
    private final ArrayList<RequestReply<LoanRequest, BankInterestReply>> rrList;
    private final DefaultListModel<String> model;
    private final String ABN_AMRO  = "#{amount} >= 200000 && #{amount} <= 300000  && #{time} <= 20";
    private final String RABO_BANK = "#{amount} <= 250000 && #{time} <= 15";
    private final String ING       = "#{amount} <= 100000 && #{time} <= 10";
    private ArrayList<Aggregator> aggregators;

    
    public LoanBroker(String clientToBrokerQueue, String brokerToClientQueue, String brokerToBankQueue, String bankToBrokerQueue) throws JMSException, NamingException
    {
        clientGateway = new ClientGateway(brokerToClientQueue, clientToBrokerQueue)
        {
            @Override
            public void onLoanRequestArrived(LoanRequest loanRequest)
            {
                onLoanRequest(loanRequest);
            }
        };
        bankGatewayABN = new BankGateway(brokerToBankQueue + "ABN", bankToBrokerQueue)
        {
            @Override
            public void onBankInterestReplyArrived(BankInterestReply bankInterestReply)
            {
                for (Aggregator aggregator : aggregators)
                {
                    if(bankInterestReply.getId() == aggregator.getId())
                    {
                        aggregator.addReply(bankInterestReply);
                        if (aggregator.allAnswered())
                        {
                            onBankInterestReply(aggregator.getBestInterest());
                        }
                    }
                }
            }
        };
        bankGatewayRABO = new BankGateway(brokerToBankQueue + "RABO", bankToBrokerQueue)
        {
            @Override
            public void onBankInterestReplyArrived(BankInterestReply bankInterestReply)
            {
                for (Aggregator aggregator : aggregators)
                {
                    if(bankInterestReply.getId() == aggregator.getId())
                    {
                        aggregator.addReply(bankInterestReply);
                        if (aggregator.allAnswered())
                        {
                            onBankInterestReply(aggregator.getBestInterest());
                        }
                    }
                }
            }
        };
        bankGatewayING = new BankGateway(brokerToBankQueue + "ING", bankToBrokerQueue)
        {
            @Override
            public void onBankInterestReplyArrived(BankInterestReply bankInterestReply)
            {
                for (Aggregator aggregator : aggregators)
                {
                    if(bankInterestReply.getId() == aggregator.getId())
                    {
                        aggregator.addReply(bankInterestReply);
                        if (aggregator.allAnswered())
                        {
                            onBankInterestReply(aggregator.getBestInterest());
                        }
                    }
                }
            }
        };
        rrList = new ArrayList<>();
        model = new DefaultListModel<>();  
        aggregators = new ArrayList<>();
        initComponents();
        this.getContentPane().setBackground(new Color(180, 185, 210));
        reloadList();
        positionWindow();
        this.setVisible(true);
    }
    
    private void positionWindow()
    {
        Dimension windowSize = Toolkit.getDefaultToolkit().getScreenSize();
        int dx = (int) (windowSize.width / 2 - this.getContentPane().getWidth() / 2);
        int dy = (int) (windowSize.height / 2 - this.getContentPane().getHeight() / 1.5);
        setLocation(dx, dy);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setLabelFor(this);
        jLabel1.setText("Loan Broker");

        jList1.setModel(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    public void reloadList()
    {
        model.clear();
        for(RequestReply<LoanRequest, BankInterestReply> lr : rrList)
        {
            model.addElement(lr.toString());
        }
        jList1.repaint();
    }
    
    private void onLoanRequest(LoanRequest loanRequest)
    {
        try
        {
            rrList.add(new RequestReply<>(loanRequest, null));
            reloadList();
            
            Aggregator aggregator = new Aggregator();
            aggregator.setId(loanRequest.getId());
            Evaluator evaluator = new Evaluator();
            BankInterestRequest request = new BankInterestRequest(loanRequest.getId(), loanRequest.getAmount(), loanRequest.getTime());
            // set values of variables amount and time
            evaluator.putVariable("amount", Integer.toString(request.getAmount()));
            evaluator.putVariable("time", Integer.toString(request.getTime()));
            String result1 = evaluator.evaluate(ABN_AMRO); // evaluate ABN Amro rule
            boolean abnRule = result1.equals("1.0"); // 1.0 means TRUE, otherwise it is FALSE
            String result2 = evaluator.evaluate(RABO_BANK); // evaluate RaboBank rule
            boolean raboRule = result2.equals("1.0"); // 1.0 means TRUE, otherwise it is FALSE
            String result3 = evaluator.evaluate(ING); // evaluate ING rule
            boolean ingRule = result3.equals("1.0"); // 1.0 means TRUE, otherwise it is FALSE
            
            if(abnRule)
            {
                request.setBank("ABN Amro");
                aggregator.upCount();
                bankGatewayABN.sendBankInterestRequest(request);
            }
            if(raboRule)
            {
                request.setBank("Rabobank");
                aggregator.upCount();
                bankGatewayRABO.sendBankInterestRequest(request);
            }
            if(ingRule)
            {
                request.setBank("ING Bank");
                aggregator.upCount();
                bankGatewayING.sendBankInterestRequest(request);
            }        
            this.aggregators.add(aggregator);
        } 
        catch (Exception ex)
        {
            System.out.println(ex.getMessage());
        }
    }
    
    private void onBankInterestReply(BankInterestReply bankInterestReply)
    {
        int i = 0;
        try
        {
            for (RequestReply<LoanRequest, BankInterestReply> rr : rrList)
            {                
                if (rr.getRequest().getId() == bankInterestReply.getId())
                {
                    rrList.set(i, new RequestReply<>(rr.getRequest(), bankInterestReply));
                }
                i++;
            }
            reloadList();
            clientGateway.sendLoanReply(new LoanReply(bankInterestReply.getId(), bankInterestReply.getInterest(), bankInterestReply.getBankId()));
        }
        catch (Exception ex)
        {
            System.out.println(ex.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
